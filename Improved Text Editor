import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.Stack;

public class Main extends JFrame {
    private JTextPane textPane;
    private Stack<String> undoStack = new Stack<>();
    private Stack<String> redoStack = new Stack<>();
    private String lastText = "";
    private boolean isProgrammaticChange = false;

    public Main() {
        setTitle("Mini Word - Stack Text Editor");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Editor area
        textPane = new JTextPane();
        textPane.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        JScrollPane scrollPane = new JScrollPane(textPane);
        add(scrollPane, BorderLayout.CENTER);

        // Menu bar
        JMenuBar menuBar = new JMenuBar();

        // --- File Menu ---
        JMenu fileMenu = new JMenu("File");
        JMenuItem newFile = new JMenuItem("New");
        JMenuItem openFile = new JMenuItem("Open");
        JMenuItem saveFile = new JMenuItem("Save");
        JMenuItem exit = new JMenuItem("Exit");
        fileMenu.add(newFile);
        fileMenu.add(openFile);
        fileMenu.add(saveFile);
        fileMenu.addSeparator();
        fileMenu.add(exit);

        // --- Edit Menu ---
        JMenu editMenu = new JMenu("Edit");
        JMenuItem undo = new JMenuItem("Undo");
        JMenuItem redo = new JMenuItem("Redo");
        JMenuItem clear = new JMenuItem("Clear");
        editMenu.add(undo);
        editMenu.add(redo);
        editMenu.addSeparator();
        editMenu.add(clear);

        // --- Format Menu ---
        JMenu formatMenu = new JMenu("Format");
        JMenuItem bold = new JMenuItem("Bold");
        JMenuItem italic = new JMenuItem("Italic");
        JMenuItem underline = new JMenuItem("Underline");
        formatMenu.add(bold);
        formatMenu.add(italic);
        formatMenu.add(underline);

        menuBar.add(fileMenu);
        menuBar.add(editMenu);
        menuBar.add(formatMenu);
        setJMenuBar(menuBar);

        // --- Shortcuts ---
        int ctrl = Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx();
        newFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ctrl));
        openFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ctrl));
        saveFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ctrl));
        exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, ctrl));
        undo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, ctrl));
        redo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, ctrl));
        bold.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, ctrl));
        italic.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I, ctrl));
        underline.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_U, ctrl));

        // --- Toolbar ---
        JToolBar toolBar = new JToolBar();
        JButton newBtn = new JButton("New");
        JButton openBtn = new JButton("Open");
        JButton saveBtn = new JButton("Save");
        JButton undoBtn = new JButton("Undo");
        JButton redoBtn = new JButton("Redo");
        JButton boldBtn = new JButton("B");
        JButton italicBtn = new JButton("I");
        JButton underlineBtn = new JButton("U");

        boldBtn.setFont(new Font("Segoe UI", Font.BOLD, 14));
        italicBtn.setFont(new Font("Segoe UI", Font.ITALIC, 14));
        underlineBtn.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        underlineBtn.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLACK));

        toolBar.add(newBtn);
        toolBar.add(openBtn);
        toolBar.add(saveBtn);
        toolBar.addSeparator();
        toolBar.add(undoBtn);
        toolBar.add(redoBtn);
        toolBar.addSeparator();
        toolBar.add(boldBtn);
        toolBar.add(italicBtn);
        toolBar.add(underlineBtn);
        add(toolBar, BorderLayout.NORTH);

        // --- Event Handling ---
        newFile.addActionListener(e -> {
            undoStack.push(lastText);
            textPane.setText("");
            lastText = "";
            redoStack.clear();
        });

        openFile.addActionListener(e -> openFile());
        saveFile.addActionListener(e -> saveFile());
        exit.addActionListener(e -> System.exit(0));

        undo.addActionListener(e -> undoAction());
        redo.addActionListener(e -> redoAction());
        clear.addActionListener(e -> {
            undoStack.push(lastText);
            textPane.setText("");
            lastText = "";
            redoStack.clear();
        });

        bold.addActionListener(e -> toggleStyle(StyleConstants.Bold));
        italic.addActionListener(e -> toggleStyle(StyleConstants.Italic));
        underline.addActionListener(e -> toggleStyle(StyleConstants.Underline));

        newBtn.addActionListener(e -> newFile.doClick());
        openBtn.addActionListener(e -> openFile());
        saveBtn.addActionListener(e -> saveFile());
        undoBtn.addActionListener(e -> undoAction());
        redoBtn.addActionListener(e -> redoAction());
        boldBtn.addActionListener(e -> toggleStyle(StyleConstants.Bold));
        italicBtn.addActionListener(e -> toggleStyle(StyleConstants.Italic));
        underlineBtn.addActionListener(e -> toggleStyle(StyleConstants.Underline));

        // --- Undo/Redo Keyboard Map ---
        InputMap im = textPane.getInputMap(JComponent.WHEN_FOCUSED);
        ActionMap am = textPane.getActionMap();

        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, ctrl), "undo");
        am.put("undo", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                undoAction();
            }
        });

        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, ctrl), "redo");
        am.put("redo", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                redoAction();
            }
        });

        // --- Text Change Tracker ---
        textPane.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                if (!isProgrammaticChange) {
                    undoStack.push(lastText);
                    lastText = textPane.getText();
                    redoStack.clear();
                }
            }
        });

        setVisible(true);
    }

    // --- Helper Methods ---
    private void undoAction() {
        if (!undoStack.isEmpty()) {
            isProgrammaticChange = true;
            redoStack.push(textPane.getText());
            String prev = undoStack.pop();
            textPane.setText(prev);
            lastText = prev;
            isProgrammaticChange = false;
        } else {
            JOptionPane.showMessageDialog(this, "Nothing to undo!");
        }
    }

    private void redoAction() {
        if (!redoStack.isEmpty()) {
            isProgrammaticChange = true;
            undoStack.push(textPane.getText());
            String next = redoStack.pop();
            textPane.setText(next);
            lastText = next;
            isProgrammaticChange = false;
        } else {
            JOptionPane.showMessageDialog(this, "Nothing to redo!");
        }
    }

    private void toggleStyle(Object style) {
        StyledDocument doc = textPane.getStyledDocument();
        int start = textPane.getSelectionStart();
        int end = textPane.getSelectionEnd();
        if (start == end) return;
        MutableAttributeSet attrs = new SimpleAttributeSet();
        StyleConstants.setBold(attrs, style == StyleConstants.Bold);
        StyleConstants.setItalic(attrs, style == StyleConstants.Italic);
        StyleConstants.setUnderline(attrs, style == StyleConstants.Underline);
        doc.setCharacterAttributes(start, end - start, attrs, false);
    }

    private void openFile() {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null)
                    sb.append(line).append("\n");
                undoStack.push(lastText);
                textPane.setText(sb.toString());
                lastText = sb.toString();
                redoStack.clear();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error opening file!");
            }
        }
    }

    private void saveFile() {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                writer.write(textPane.getText());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error saving file!");
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Main::new);
    }
}
